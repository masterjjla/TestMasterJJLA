{"version":3,"file":"RemoteBuilder.js","sourceRoot":"","sources":["../../src/targets/RemoteBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { path7za } from \"7zip-bin\"\nimport { ensureDir, outputFile, outputJson } from \"fs-extra-p\"\nimport { constants, connect, ClientHttp2Stream, OutgoingHttpHeaders, ClientHttp2Session, SecureClientSessionOptions } from \"http2\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { spawn } from \"child_process\"\nimport { debug, Arch, isEnvTrue } from \"builder-util\"\nimport * as path from \"path\"\nimport { createWriteStream } from \"fs\"\nimport { httpExecutor } from \"builder-util/out/nodeHttpExecutor\"\nimport { UploadTask } from \"electron-publish\"\nimport { Target, TargetSpecificOptions } from \"../core\"\nimport { ArtifactCreated } from \"../packagerApi\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { JsonStreamParser } from \"../util/JsonStreamParser\"\nimport { time } from \"../util/timer\"\n\nconst {\n  HTTP2_HEADER_PATH,\n  HTTP2_METHOD_POST,\n  HTTP2_METHOD_GET,\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_CONTENT_TYPE,\n  HTTP2_HEADER_STATUS,\n  HTTP_STATUS_OK,\n  HTTP_STATUS_BAD_REQUEST\n} = constants\n\n// noinspection SpellCheckingInspection\nconst ELECTRON_BUILD_SERVICE_LOCAL_CA_CERT = Buffer.from(`-----BEGIN CERTIFICATE-----\nMIIBiDCCAS+gAwIBAgIRAPHSzTRLcN2nElhQdaRP47IwCgYIKoZIzj0EAwIwJDEi\nMCAGA1UEAxMZZWxlY3Ryb24uYnVpbGQubG9jYWwgcm9vdDAeFw0xNzExMTMxNzI4\nNDFaFw0yNzExMTExNzI4NDFaMCQxIjAgBgNVBAMTGWVsZWN0cm9uLmJ1aWxkLmxv\nY2FsIHJvb3QwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQVyduuCT2acuk2QH06\nyal/b6O7eTTpOHk3Ucjc+ZZta2vC2+c1IKcSAwimKbTbK+nRxWWJl9ZYx9RTwbRf\nQjD6o0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4E\nFgQUlm08vBe4CUNAOTQN5Z1RNTfJjjYwCgYIKoZIzj0EAwIDRwAwRAIgMXlT6YM8\n4pQtnhUjijVMz+NlcYafS1CEbNBMaWhP87YCIGXUmu7ON9hRLanXzBNBlrtTQG+i\nl/NT6REwZA64/lNy\n-----END CERTIFICATE-----\n`)\n\n// noinspection SpellCheckingInspection\nconst ELECTRON_BUILD_SERVICE_CA_CERT = Buffer.from(`-----BEGIN CERTIFICATE-----\nMIIBfTCCASOgAwIBAgIRAIdieK1+3C4abgOvQ7pVVqAwCgYIKoZIzj0EAwIwHjEc\nMBoGA1UEAxMTZWxlY3Ryb24uYnVpbGQgcm9vdDAeFw0xNzExMTMxNzI4NDFaFw0x\nODExMTMxNzI4NDFaMB4xHDAaBgNVBAMTE2VsZWN0cm9uLmJ1aWxkIHJvb3QwWTAT\nBgcqhkjOPQIBBggqhkjOPQMBBwNCAAR+4b6twzizN/z27yvwrCV5kinGUrfo+W7n\nL/l28ErscNe1BDSyh/IYrnMWb1rDMSLGhvkgI9Cfex1whNPHR101o0IwQDAOBgNV\nHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU6Dq8kK7tQlrt\nzkIYrYiTZGpHEp0wCgYIKoZIzj0EAwIDSAAwRQIgKSfjAQbYlY/S1wMLUi84r8QN\nhhMnUwsOmlDan0xPalICIQDLIAXAIyArVtH38a4aizvhH8YeXrxzpJh3U8RolBZF\nSA==\n-----END CERTIFICATE-----\n`)\n\ninterface RemoteBuilderResponse {\n  error?: string\n}\n\nexport class RemoteBuilder {\n  // noinspection JSMethodCanBeStatic\n  async build(targets: Array<string>, unpackedDirectory: string, packager: PlatformPackager<any>, outDir: string): Promise<any> {\n    const endpoint = await findBuildAgent()\n    const buildManager = new RemoteBuildManager(endpoint, unpackedDirectory, outDir, packager)\n    const result = await buildManager.build({\n      \"x-targets\": targets,\n      \"x-platform\": packager.platform.buildConfigurationKey,\n    })\n    if (result != null && result.error != null) {\n      throw new Error(`Remote builder error (if you think that it is not your application misconfiguration issue, please file issue to https://github.com/electron-userland/electron-builder/issues):\\n\\n${result.error}`)\n    }\n  }\n}\n\nasync function findBuildAgent(): Promise<string> {\n  const result = process.env.ELECTRON_BUILD_SERVICE_ENDPOINT\n  if (result != null) {\n    debug(`Remote build endpoint set explicitly: ${result}`)\n    return result.startsWith(\"http\") ? result : `https://${result}`\n  }\n\n  const agentInfo = JSON.parse((await httpExecutor.request({\n    hostname: \"www.electron.build\",\n    // add random query param to prevent caching\n    path: `/find-build-agent?c=${Date.now().toString(32)}`,\n  }))!!)\n  return agentInfo.endpoint\n}\n\nfunction getZstdCompressionLevel(endpoint: string): string {\n  const result = process.env.ELECTRON_BUILD_SERVICE_ZSTD_COMPRESSION\n  if (result != null) {\n    return result\n  }\n  return endpoint.startsWith(\"https://127.0.0.1:\") || endpoint.startsWith(\"https://localhost:\") || endpoint.startsWith(\"[::1]:\") ? \"3\" : \"19\"\n}\n\nclass RemoteBuildManager {\n  private readonly client: ClientHttp2Session\n\n  private files: Array<ArtifactInfo> | null = null\n  private finishedStreamCount = 0\n\n  constructor(private readonly buildServiceEndpoint: string, private readonly unpackedDirectory: string, private readonly outDir: string, private readonly packager: PlatformPackager<any>) {\n    debug(`Connect to remote build service: ${buildServiceEndpoint}`)\n    const options: SecureClientSessionOptions = {}\n    const caCert = process.env.ELECTRON_BUILD_SERVICE_CA_CERT\n    if (caCert !== \"false\") {\n      const isUseLocalCert = isEnvTrue(process.env.USE_ELECTRON_BUILD_SERVICE_LOCAL_CA)\n      if (isUseLocalCert) {\n        debug(\"Local certificate authority is used\")\n      }\n      options.ca = caCert || (isUseLocalCert ? ELECTRON_BUILD_SERVICE_LOCAL_CA_CERT : ELECTRON_BUILD_SERVICE_CA_CERT)\n      // we cannot issue cert per IP because build agent can be started on demand (and for security reasons certificate authority is offline).\n      // Since own certificate authority is used, it is ok to skip server name verification.\n      options.checkServerIdentity = () => undefined\n    }\n    this.client = connect(buildServiceEndpoint, options)\n  }\n\n  build(customHeaders: OutgoingHttpHeaders): Promise<RemoteBuilderResponse | null> {\n    return new BluebirdPromise<RemoteBuilderResponse | null>((resolve, reject) => {\n      const client = this.client\n      client.on(\"socketError\", reject)\n      client.on(\"error\", reject)\n\n      let handled = false\n      client.once(\"close\", () => {\n        if (!handled) {\n          reject(new Error(\"Closed unexpectedly\"))\n        }\n      })\n      client.once(\"timeout\", () => {\n        reject(new Error(\"Timeout\"))\n      })\n\n      this.doBuild(customHeaders, result => {\n        handled = true\n        resolve(result)\n      }, reject)\n    })\n      .catch(error => {\n        if (error.code === \"ECONNREFUSED\") {\n          throw new Error(`Cannot connect to electron build service ${this.buildServiceEndpoint}: ${error.message}`)\n        }\n        else {\n          throw error\n        }\n      })\n      .finally(() => {\n        this.client.destroy()\n      })\n  }\n\n  private async saveConfigurationAndMetadata() {\n    const packager = this.packager.info\n    const tempDir = await packager.tempDirManager.createTempDir({prefix: \"remote-build-metadata\"})\n    // we cannot use getTempFile because file name must be constant\n    const info: any = {\n      metadata: packager.metadata,\n      configuration: packager.config,\n      repositoryInfo: packager.repositoryInfo,\n    }\n    if (packager.metadata !== packager.devMetadata && packager.devMetadata != null) {\n      info.devMetadata = packager.devMetadata\n    }\n    const file = path.join(tempDir, \"info.json\")\n    await outputJson(file, info)\n    return file\n  }\n\n  private doBuild(customHeaders: OutgoingHttpHeaders, resolve: (result: RemoteBuilderResponse | null) => void, reject: (error: Error) => void): void {\n    this.upload(customHeaders, resolve, reject)\n  }\n\n  private upload(customHeaders: OutgoingHttpHeaders, resolve: (result: RemoteBuilderResponse | null) => void, reject: (error: Error) => void) {\n    const zstdCompressionLevel = getZstdCompressionLevel(this.buildServiceEndpoint)\n\n    const stream = this.client.request({\n      [HTTP2_HEADER_PATH]: \"/v1/upload\",\n      [HTTP2_HEADER_METHOD]: HTTP2_METHOD_POST,\n      [HTTP2_HEADER_CONTENT_TYPE]: \"application/octet-stream\",\n      ...customHeaders,\n      // only for stats purpose, not required for build\n      \"x-zstd-compression-level\": zstdCompressionLevel,\n    })\n    stream.on(\"error\", reject)\n    // this.handleStreamEvent(resolve, reject)\n    this.uploadUnpackedAppArchive(stream, zstdCompressionLevel, reject)\n\n    stream.on(\"response\", headers => {\n      const status: number = headers[HTTP2_HEADER_STATUS] as any\n      if (status !== HTTP_STATUS_OK && status !== HTTP_STATUS_BAD_REQUEST) {\n        reject(new Error(`Error: ${status}`))\n        return\n      }\n\n      let data = \"\"\n      stream.setEncoding(\"utf8\")\n      stream.on(\"data\", (chunk: string) => {\n        data += chunk\n      })\n      stream.on(\"end\", () => {\n        const result = data.length === 0 ? {} : JSON.parse(data)\n        if (debug.enabled) {\n          debug(`Remote builder result: ${JSON.stringify(result, null, 2)}`)\n        }\n\n        if (status === HTTP_STATUS_BAD_REQUEST) {\n          reject(new Error(JSON.stringify(result, null, 2)))\n          return\n        }\n\n        const id = result.id\n        if (id == null) {\n          reject(new Error(\"Server didn't return id\"))\n          return\n        }\n\n        // cannot connect immediately because channel status is not yet created\n        setTimeout(() => this.listenEvents(id, resolve, reject), 3 * 1000 /* min build time */)\n      })\n    })\n  }\n\n  private listenEvents(id: string, resolve: (result: RemoteBuilderResponse | null) => void, reject: (error: Error) => void) {\n    const stream = this.client.request({\n      [HTTP2_HEADER_PATH]: `/v1/status/${id}`,\n      [HTTP2_HEADER_METHOD]: HTTP2_METHOD_GET,\n    })\n    stream.on(\"error\", reject)\n    stream.on(\"response\", headers => {\n      if (!checkStatus(headers[HTTP2_HEADER_STATUS] as any, reject)) {\n        return\n      }\n\n      stream.setEncoding(\"utf8\")\n      const eventSource = new JsonStreamParser(data => {\n        if (debug.enabled) {\n          debug(`Remote builder event: ${JSON.stringify(data)}`)\n        }\n\n        if (!(\"files\" in data)) {\n          console.error(`Unknown builder event: ${JSON.stringify(data)}`)\n          return\n        }\n\n        this.files = data.files\n        for (const artifact of this.files!!) {\n          this.downloadFile(id, artifact, resolve, reject)\n        }\n      })\n      stream.on(\"data\", (chunk: string) => eventSource.parseIncoming(chunk))\n      stream.on(\"end\", () => {\n        console.log(\"event stream end\")\n      })\n    })\n  }\n\n  private downloadFile(id: string, artifact: ArtifactInfo, resolve: (result: RemoteBuilderResponse | null) => void, reject: (error: Error) => void) {\n    const stream = this.client.request({\n      [HTTP2_HEADER_PATH]: `/v1/download/${id}/${artifact.file}`,\n      [HTTP2_HEADER_METHOD]: HTTP2_METHOD_GET,\n    })\n    stream.on(\"error\", reject)\n\n    const localFile = path.join(this.outDir, artifact.file)\n    const artifactCreatedEvent = this.artifactInfoToArtifactCreatedEvent(artifact, localFile)\n    const fileWritten = () => {\n      this.finishedStreamCount++\n      if (debug.enabled) {\n        debug(`Remote artifact saved to: ${localFile}`)\n      }\n\n      // PublishManager uses outDir and options, real (the same as for local build) values must be used\n      this.packager.info.dispatchArtifactCreated(artifactCreatedEvent)\n\n      if (this.files != null && this.finishedStreamCount >= this.files.length) {\n        resolve(null)\n      }\n    }\n\n    stream.on(\"response\", headers => {\n      if (!checkStatus(headers[HTTP2_HEADER_STATUS] as any, reject)) {\n        return\n      }\n\n      if (artifact.file.endsWith(\".yml\") || artifact.file.endsWith(\".json\")) {\n        const buffers: Array<Buffer> = []\n        stream.on(\"end\", () => {\n          const fileContent = buffers.length === 1 ? buffers[0] : Buffer.concat(buffers)\n          artifactCreatedEvent.fileContent = fileContent\n          outputFile(localFile, fileContent)\n            .then(fileWritten)\n            .catch(reject)\n        })\n        stream.on(\"data\", (chunk: Buffer) => {\n          buffers.push(chunk)\n        })\n      }\n      else {\n        ensureDir(path.dirname(localFile))\n          .then(() => {\n            const fileStream = createWriteStream(localFile, {\n              // 1MB buffer, download as faster as possible, reduce chance that download will be paused for a while due to slow file write\n              highWaterMark: 1024 * 1024,\n            } as any)\n            fileStream.on(\"error\", reject)\n            fileStream.on(\"close\", fileWritten)\n            stream.pipe(fileStream)\n          })\n          .catch(reject)\n      }\n    })\n  }\n\n  private artifactInfoToArtifactCreatedEvent(artifact: ArtifactInfo, localFile: string): ArtifactCreated {\n    const target = artifact.target\n    // noinspection SpellCheckingInspection\n    return {\n      ...artifact,\n      file: localFile,\n      target: target == null ? null : new FakeTarget(target, this.outDir, (this.packager.config as any)[target]),\n      packager: this.packager,\n    }\n  }\n\n  // compress and upload in the same time, directly to remote without intermediate local file\n  private uploadUnpackedAppArchive(stream: ClientHttp2Stream, zstdCompressionLevel: string, reject: (error: Error) => void) {\n    this.saveConfigurationAndMetadata()\n      .then(infoFile => {\n        const compressAndUploadTimer = time(\"compress and upload\")\n        // noinspection SpellCheckingInspection\n        const tarProcess = spawn(path7za, [\"a\", \"dummy\", \"-ttar\", \"-so\", this.unpackedDirectory, infoFile], {\n          stdio: [\"pipe\", \"pipe\", process.stderr],\n        })\n        tarProcess.stdout.on(\"error\", reject)\n\n        const zstdProcess = spawn(\"zstd\", [`-${zstdCompressionLevel}`, \"--long\"], {\n          stdio: [\"pipe\", \"pipe\", process.stderr],\n        })\n        zstdProcess.on(\"error\", reject)\n        tarProcess.stdout.pipe(zstdProcess.stdin)\n        zstdProcess.stdout.pipe(stream)\n\n        zstdProcess.stdout.on(\"end\", () => {\n          compressAndUploadTimer.end()\n        })\n      })\n      .catch(reject)\n  }\n}\n\nfunction checkStatus(status: number, reject: (error: Error) => void) {\n  if (status === HTTP_STATUS_OK) {\n    return true\n  }\n\n  if (status === constants.HTTP_STATUS_SERVICE_UNAVAILABLE) {\n    reject(new Error(`Error: request rate limit exceeded, please retry after 15 seconds`))\n    return false\n  }\n  else {\n    reject(new Error(`Error: ${status}`))\n    return false\n  }\n}\n\nclass FakeTarget extends Target {\n  constructor(name: string, readonly outDir: string, readonly options: TargetSpecificOptions | null | undefined) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch) {\n    // no build\n  }\n}\n\nexport interface ArtifactInfo extends UploadTask {\n  target: string | null\n\n  readonly isWriteUpdateInfo?: boolean\n  readonly updateInfo?: any\n}"]}
